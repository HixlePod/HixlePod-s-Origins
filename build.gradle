buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url='https://repo.spongepowered.org/repository/maven-public/' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id "com.github.johnrengelman.shadow" version "7.1.0"
}

version = '1.0'
group = 'com.hixlepod.hixlepodsorigins' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'hixlepodsorigins'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft  {

    mappings channel: 'official', version: '1.20.1'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=hixlepodsorigins.mixin.json"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'hixlepodsorigins'

            mods {
                hixlepodsorigins {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg "-mixin.config=hixlepodsorigins.mixin.json"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'hixlepodsorigins'


            mods {
                hixlepodsorigins {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'hixlepodsorigins'

            mods {
                hixlepodsorigins {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            arg "-mixin.config=hixlepodsorigins.mixin.json"
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'hixlepodsorigins', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                hixlepodsorigins {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    // Put repositories for dependencies here
    maven { url = 'https://maven.minecraftforge.net/' }
    maven { url = "https://repo.spongepowered.org/repository/maven-public/" }
    maven { url = "https://maven.theillusivec4.top/" }
    maven { url = "https://jitpack.io" }
    maven { url = "https://maven.kyrptonaught.dev" }

    maven {
        name = "Progwml6's maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }

    maven { url = 'https://maven.maxhenkel.de/repository/public' }

    //maven { url = 'https://maven.maxhenkel.de/repository/public' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.20.1-47.1.47'

    //Mixin AP
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    //JEI API
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"))
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}"))
    runtimeOnly(fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}"))

    //Caelus API
    runtimeOnly fg.deobf("top.theillusivec4.caelus:caelus-forge:3.1.0+1.20")
    compileOnly fg.deobf("top.theillusivec4.caelus:caelus-forge:3.1.0+1.20")

    //Pehkui API
    implementation fg.deobf("com.github.Virtuoel:Pehkui:3.7.8-1.20.1-forge")

    //Curios
    runtimeOnly fg.deobf("top.theillusivec4.curios:curios-forge:5.3.1+1.20.1")
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:5.3.1+1.20.1:api")

    //Voice Chat API
    //implementation "de.maxhenkel.voicechat:voicechat-api:${voicechat_api_version}"

    //Season Mod API
    implementation fg.deobf("com.github.glitchfiend:SereneSeasons:1.20.1-9.0.0.43")

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

mixin {
    add sourceSets.main, 'hixlepodsorigins.mixin.refmap.json'
    config "hixlepodsorigins.mixin.json"

    debug.verbose = true
    debug.export = true
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "hixlepodsorigins",
                "Specification-Vendor"    : "hixlepodsoriginssareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "hixlepodsoriginssareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder": 0,
                "MixinConfigs" : "hixlepodsorigins.mixin.json"
        ])
    }
}



// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
